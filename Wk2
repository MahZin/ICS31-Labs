2.12 LAB: Parking at $chool
###
When provided with the number of days a student travels to UCI each month, your program should provide a cost/per trip in terms of UCI 
Parking costs.

The current UCI Rates for Student Parking can be found here: https://www.parking.uci.edu/permits/studentpermits.cfm

You will write a program to display how much each car trip will cost the traveler for permit options: 
S - Student P - Preferred R - Resident

Your output should report the cost for parking using the monthly rate.

Note: due to a Python output limitation, use string formatting to print 2 decimal places when printing output: print("{:.2f}".format(outputValue))

Ex: If the input is:

31

Then the output is:

Per Park Cost: 
S - Student:    2.35
P - Preferred:  2.97
R - Resident:   3.55
###
days = int(input())
S_Student = 73 / days
P_Preferred = 92 / days
R_Resident = 110 / days
print('Per Park Cost:  ')
print('S - Student:    %.2f' % S_Student)
print('P - Preferred:  %.2f' % P_Preferred)
print('R - Resident:   %.2f'  % R_Resident)



2.13 LAB: Divide by x
###
Write a program using integers userNum and x as input, and output userNum divided by x four times.

Ex: If the input is:

2000
2

Then the output is:

1000 500 250 125

Note: In Python 3, integer division discards fractions. Ex: 6 // 4 is 1 (the 0.5 is discarded).
###
''' Type your code here. '''
userNum = int(input())
x = int(input())
print(userNum // x, end=' ')
print(userNum // (x*x), end=' ')
print(userNum // (x*x*x), end=' ')
print(userNum // (x*x*x*x))



2.14 LAB: Driving costs
###
Driving is expensive. Write a program with a car's miles/gallon and gas dollars/gallon (both floats) as input, and the number of miles driven. Output the gas cost.

Note: due to a Python output limitation, use string formating to print to 2 decimal places when printing output: print('{:.2f}'.format(gasCost))

Ex: If the input is:

20.0
3.1599
10

Then the output is:

1.58

Note: Real per-mile cost would also include maintenance and depreciation.
###
# Type your code here.
miles_gallon = float(input())
dollars_gallon = float(input())
miles_driven = int(input())
gas_cost = (dollars_gallon * miles_driven) / (miles_gallon)
print('%.2f' % gas_cost)



2.15 LAB: Expression for calories burned during workout
###
The following equations estimate the calories burned when exercising (source):

Men: Calories = [(Age x 0.2017) — (Weight x 0.09036) + (Heart Rate x 0.6309) — 55.0969] x Time / 4.184

Women: Calories = [(Age x 0.074) — (Weight x 0.05741) + (Heart Rate x 0.4472) — 20.4022] x Time / 4.184

Write a program using inputs age (years), weight (pounds), heart rate (beats per minute), and time (minutes). Output calories burned 
for men and women.

Note: due to a Python output limitation, use string formatting to display only 2 decimal places when printing output: 
print("{:.2f}".format(outputValue))

Ex: If the input is:

49
155
148
60

Then the output is:

Men: 489.78 calories
Women: 580.94 calories
###
''' Men: Calories = ((Age x 0.2017) - (Weight x 0.09036) + (Heart Rate x 0.6309) - 55.0969) x Time / 4.184 '''
''' Women: Calories = ((Age x 0.074) - (Weight x 0.05741) + (Heart Rate x 0.4472) - 20.4022) x Time / 4.184 '''
Age = int(input())
Weight = int(input())
Heart_Rate = int(input())
Time = int(input())

Men_Calories = ((Age * 0.2017) - (Weight * 0.09036) + (Heart_Rate * 0.6309) - 55.0969) * Time / 4.184 
Women_Calories = ((Age * 0.074) - (Weight * 0.05741) + (Heart_Rate * 0.4472) - 20.4022) * Time / 4.184
print('Men: %.2f calories' % Men_Calories)
print('Women: %.2f calories' % Women_Calories)



2.16 LAB: Using math functions
###
Given three floating-point numbers x, y, and z, output x to the power of y, x to the power of (y squared), the absolute value of x, 
and the square root of (xy to the power of z).

Note: due to a Python output limitation, use string formatting to print 2 decimal places when printing output: 
print("{:.2f} {:.2f}".format(outputValue1, outputValue2))

Ex: If the input is:

5.0
6.5
3.2

Then the output is:

34938.56 340002948455826440449068892160.00 5.00 262.43
###
# Type your code here.
import math
x = float(input())
y = float(input())
z = float(input())

print('%.2f' % (x**y), end=' ')
print('%.2f' % (x**(y*y)), end=' ')
print('%.2f' % abs(x), end=' ')
print('%.2f' % math.sqrt((x*y)**z))



2.17 LAB: Musical note frequencies
###
On a piano, each key has a frequency, and each subsequent key (black or white) is a known amount higher. Ex: The A key above the 
middle C key has a frequency of 440 Hz. Each subsequent key (black or white) has a frequency of 440 * rn, where n is the number of 
keys from that A key, and r is 2(1/12). Given an initial frequency, output that frequency and the next 4 higher key frequencies.

Note: due to a Python output limitation, use the string formatting to print 2 decimal places when printing output: 
print("{:.2f}".format(outputValue))

Ex: If the input is 440, the output is:

440 466.16 493.88 523.25 554.37

Note: Include one statement to compute r = 2(1/12), then use r in the formula fn = f0 * rn. (You'll have three statements using that 
formula, different only in the value for n).
###
# Type your code here.
r = 2**(1/12)
frequency = int(input())
print(frequency, end=' ')
print('%.2f' % (frequency * r), end=' ')
print('%.2f' % (frequency * (r*r)), end=' ')
print('%.2f' % (frequency * (r*r*r)), end=' ')
print('%.2f' % (frequency * (r*r*r*r)))



2.18 LAB: Input and formatted output: Caffeine levels
###
A half-life is the amount of time it takes for a substance or entity to fall to half its original value. Caffeine has a half-life of 
about 6 hours in humans. Given caffeine amount (in mg) as input, output the caffeine level after 6, 12, and 18 hours. Use a string 
formatting expression with conversion specifiers to output the caffeine amount as floating-point numbers.

Note: due to a Python output limitation, limit printing precision of floating-point numbers to two-digits after the decimal point 
using string formatting.

Ex: If the input is 100, the output is:

After 6 hours: 50.00 mg
After 12 hours: 25.00 mg
After 18 hours: 12.50 mg

Note: A cup of coffee has about 100 mg. A soda has about 40 mg. An "energy" drink (a misnomer) has between 100 mg and 200 mg.
###
# Type your code here.
caffeineMg = float(input())
caffeine_six = caffeineMg / 2
caffeine_twelve = caffeineMg / 4
caffeine_eighteen = caffeineMg / 8
print('After 6 hours: %.2f mg' % caffeine_six)
print('After 12 hours: %.2f mg' % caffeine_twelve)
print('After 18 hours: %.2f mg' % caffeine_eighteen)



2.19 LAB: Input and formatted output: House real estate summary
###
Sites like Zillow get input about house prices from a database and provide nice summaries for readers. Write a program with two inputs, 
current price and last month's price (both integers). Then, output a summary listing the price, the change since last month, and the estimated monthly mortgage computed as (currentPrice * 0.045) / 12 (Note: Output directly. Do not store in a variable.).

Note: due to a Python output limitation, limit printing precision of floating-point numbers to two-digits after the decimal point using 
string formatting.

Ex: If the input is:

200000 
210000

Then the output is:

This house is $200000. The change is $-10000 since last month. 
The estimated monthly mortgage is $750.00.

Note: Getting the precise spacing, punctuation, and newlines exactly right is a key point of this assignment. Such precision is an important part of programming.
###
# Type your code here
currentPrice = int(input())
lastMonthsPrice = int(input())
priceDifference = currentPrice - lastMonthsPrice 
print('This house is', '${}.'.format(currentPrice), end=' ')
print('The change is', '${}'.format(priceDifference), 'since last month.')
print('The estimated monthly mortgage is $%.2f.' % ((currentPrice*0.045) / 12))




2.20 LAB: String Formatting Author Names
###
You are responsible to design a system to organize authors' names in the new UCI research magazine. The system will give you 3 strings 
in order: First name, Middle name, and Last name. Your task is to print the final formatted name, which must follow the template: 
Last Name, First name, and Middle initial. For example, if the input is

Geoffrey 
Everest
Hinton

The output is:

    Hinton, Geoffrey E.

Petr, the chief editor, is very peculiar about the printing system, though. He wants the last name aligned to right, with a width of 
at least 10 characters, padding with empty spaces to the left if necessary, The first name must not be longer than 8 letters as well, 
cropping it if necessary. So, if the input is

Jacqueline
Long
Kim

The output is:

       Kim, Jacqueli L.

Hint: Use string formatting for padding and aligning the strings: https://pyformat.info/#stringpadalign
###
firstName = input()
middleName = input()
lastName = input()

print('%10s' % lastName, end=', ')
print('%.8s' % firstName , end=' ')
print(middleName[0] + '.')
