7.7 LAB: Output values in a list below a user defined amount - functions
###
Write a program that first gets a list of integers from input. The input begins with an integer indicating the number of integers that follow. Then, get the last value from the input, and output all integers less than or equal to that value.

Ex: If the input is:

5
50
60
140
200
75
100

Then the output is:

50
60
75

The 5 indicates that there are five integers in the list, namely 50, 60, 140, 200, and 75. The 100 indicates that the program should output all integers less than or equal to 100, so the program outputs 50, 60, and 75.

Such functionality is common on sites like Amazon, where a user can filter results.

Your code must define and call the following two functions:
def GetUserValues()
def OutputIntsLessThanOrEqualToThreshold(userValues, upperThreshold)

Utilizing functions will help to make your main will be very clean and intuitive.

Note: This is a lab from a previous chapter that now requires the use of functions.
###
def GetUserValues():
    list_nums = []
    inp_len = int(input()) 

    i = 0
    for i in range(inp_len):
        inp_num = int(input())
        list_nums.append(inp_num)
        i += 1

    upper_thres = int(input())

    return list_nums, upper_thres


def OutputIntsLessThanOrEqualToThreshold(userVal, upperThres):
    for num in userVal:
        if num <= upperThres:
            print(num)


if __name__ == '__main__':
    userValues, upperThreshold = GetUserValues()
    OutputIntsLessThanOrEqualToThreshold(userValues, upperThreshold)

 

7.8 LAB: Sieve of Sundaram
###
In this lab, you are going to implement "Sieve of Sundaram" into a Python function. The Sieve of Sundaram is a simple algorithm used to 
find all odd prime numbers up to a specific integer.

The input of the function is an integer n, which will be used to find all the odd prime numbers less than 2n+2.

This algorithm is described as follows (Photo credit: Wikipedia https://en.m.wikipedia.org/wiki/File:SieveofSundaram_Animated.gif):

- start with a list of numbers from 1 to n;
- for every pair of integers i and j where 1<= i <= j and i + j + 2ij <= n, remove i + j + 2ij from the list above;
- finally, for each remaining number k in the list, 2k+1 is a prime number.

Ex: If the input is 1, the output is:

[3]

Ex: If the input is 2, the output is:

[3, 5]

Ex: If the input is 10, the output is:

[3, 5, 7, 11, 13, 17, 19]

Your program must define and call the following function. The function should return a list with all the odd prime numbers less than 2n+2.
def sieve_of_sundaram(n)

Hints
1. Use the __main__ statement whenever appropriate. Read section 2.5 - "Importing modules and executing scripts" if you are not familiar 
with this.
2. Use two nested loops to go through the pairs of i and j.
###
import math
# Prints all prime numbers smaller


def sieve_of_sundaram(n):
    results = []
    nNew = int((2 * n) + 2)
    nNew = int((nNew - 2) / 2)

    marked = [0] * (nNew + 1)

    for i in range(1, nNew + 1):
        j = i
        while((i + j + 2 * i * j) <= nNew):
            marked[i + j + 2 * i * j] = 1
            j += 1

    for i in range(1, nNew + 1):
        if (marked[i] == 0):
            p = (2 * i + 1)
            results.append(p)

    print(results)
    return results

if __name__ == '__main__':
    n = int(input())
    sieve_of_sundaram(n)



7.9 LAB: Online shopping cart - Part 1
###
(1) Build the ItemToPurchase named tuple with the following atributes: (3 pts)

- item_name (string)
- item_price (float)
- item_quantity (int)
Hints:


1. Define your namedtuple in a place where other Python program is able to import and/or check it.
2. Always name variables and functions exactly as they are outlined in questions
3. If specified, always assign the designated data types to variables.
4. Python is case-sensitive!!

(2) Write a function named construct_item() for ItemToPurchase that creates and returns a named tuple with the following specifications:
(1 pt)

- Initializes item's name = "none", item's price = 0, item's quantity = 0

Hint: No arguments required for this function

(3) Write a function named print_item_cost() for ItemToPurchase that takes a named tuple as a parameter and prints the contents with 
the following specifications: (1 pt)


Ex. of print_item_cost() output:

Bottled Water 10 @ $1 = $10

(4) In the main section of your code, prompt the user for two items and create two objects of the ItemToPurchase named tuple using your 
construct_item() function. (2 pts) NOTE: You can replace the fields of a namedtuple using the _replace() function from the namedtuple collections. Here is a link to the documentation, and examples of how to use the method: https://docs.python.org/3/library/collections.html#collections.namedtuple



Ex:

Item 1
Enter the item name:
Chocolate Chips
Enter the item price:
3
Enter the item quantity:
1

Item 2
Enter the item name:
Bottled Water
Enter the item price:
1
Enter the item quantity:
10


(5) Add the costs of the two items together and output the total cost. (2 pts) 

Ex:

TOTAL COST
Chocolate Chips 1 @ $3 = $3
Bottled Water 10 @ $1 = $10

Total: $13
###
from collections import namedtuple

ItemToPurchase = namedtuple(
    'ItemToPurchase',
    'item_name item_price item_quantity'
)


def construct_item():
    return ItemToPurchase(
        item_name='none',
        item_price=0,
        item_quantity=0
    )


def print_item_cost(ItemtoPurchase):
    # Calculate the cost.
    # Display the cost.
    print(
        ItemtoPurchase.item_name + ' ' + str(ItemtoPurchase.item_quantity) +
        ' @ $' + str(ItemtoPurchase.item_price) + ' = ' + '$' +
        str(int(ItemtoPurchase.item_quantity) * int(ItemtoPurchase.item_price))
    )

if __name__ == "__main__":
    # Prompt the user for input.
    print("Item 1")
    n1 = input("Enter the item name:\n")
    p1 = int(input("Enter the item price:\n"))
    q1 = int(input("Enter the item quantity:\n"))

    print ("\nItem 2")
    n2 = input("Enter the item name:\n")
    p2 = int(input("Enter the item price:\n"))
    q2 = int(input("Enter the item quantity:\n"))

    i1 = ItemToPurchase(n1, p1, q1)
    i2 = ItemToPurchase(n2, p2, q2)

    # Display the message.
    print ("\nTOTAL COST")

    # Call the function to display the
    # Cost of the individual item.
    item_1 = construct_item()
    item_1 = ItemToPurchase._replace(i1)
    print_item_cost(item_1)

    item_2 = construct_item()
    item_2 = ItemToPurchase._replace(i2)
    print_item_cost(item_2)
    # Calculate and print the total cost.
    t = (i1.item_price*i1.item_quantity)+(i2.item_price*i2.item_quantity)
    print ('\nTotal: $'+str(t))



7.10 LAB: Data Visualization
###
(1) Write a function, get_data_headers(), to prompt the user for a title, and column headers for a table. Return a list of three 
strings, and print the title, and column headers. (2 pt) 

Ex:

Enter a title for the data:
Number of Novels Authored
You entered: Number of Novels Authored

Ex:

Enter the column 1 header:
Author name
You entered: Author name

Enter the column 2 header:
Number of novels
You entered: Number of novels

(2) Write a function, get_data_points(), that prompts the user for data points, and returns a dictionary where the keys are the string 
component of the data points, and the values are the integer component of the data points.

Data points must be in this format: string, int. Store the information before the comma into a string variable and the information 
after the comma into an integer. The user will enter -1 when they have finished entering data points. Output the data points on each 
iteration. (4 pts) 

Ex:

Enter a data point (-1 to stop input):
Jane Austen, 6
Data string: Jane Austen
Data integer: 6

(3) Improve the get_data_points() function by performing error checking for the data point entries. If any of the following errors 
occurs, output the appropriate error message and prompt again for a valid data point.

- If entry has no comma
- Output: Error: No comma in string. (1 pt)
- If entry has more than one comma
- Output: Error: Too many commas in input. (1 pt)
- If entry after the comma is not an integer
- Output: Error: Comma not followed by an integer. (2 pts)

Ex:

Enter a data point (-1 to stop input):
Ernest Hemingway 9
Error: No comma in string.

Enter a data point (-1 to stop input):
Ernest, Hemingway, 9
Error: Too many commas in input.

Enter a data point (-1 to stop input):
Ernest Hemingway, nine
Error: Comma not followed by an integer.

Enter a data point (-1 to stop input):
Ernest Hemingway, 9
Data string: Ernest Hemingway
Data integer: 9

(4) Write a function, print_data(), that takes the table header information list created in (1) and the dictionary created in (3). 
The function will output the information in a formatted table. The title is right justified with a minimum field width value of 33. 
Column 1 has a minimum field width value of 20. Column 2 has a minimum field width value of 23. (3 pts)

Ex:

        Number of Novels Authored
Author name         |       Number of novels
--------------------------------------------
Jane Austen         |                      6
Charles Dickens     |                     20
Ernest Hemingway    |                      9
Jack Kerouac        |                     22
F. Scott Fitzgerald |                      8
Mary Shelley        |                      7
Charlotte Bronte    |                      5
Mark Twain          |                     11
Agatha Christie     |                     73
Ian Flemming        |                     14
J.K. Rowling        |                     14
Stephen King        |                     54
Oscar Wilde         |                      1

(6) Write a function, print_histogram(), to output the data point information formatted as a histogram. Each name is right justified 
with a minimum field width value of 20. (4 pts) 

Ex:

         Jane Austen ******
     Charles Dickens ********************
    Ernest Hemingway *********
        Jack Kerouac **********************
 F. Scott Fitzgerald ********
        Mary Shelley *******
    Charlotte Bronte *****
          Mark Twain ***********
     Agatha Christie *************************************************************************
        Ian Flemming **************
        J.K. Rowling **************
        Stephen King ******************************************************
         Oscar Wilde *
 ###
"""Take data from the user and print the data in a table and histogram."""

 

 

def get_data_headers():

    """Ask the user for a title and column headers."""

    header = []

 

    title = input('Enter a title for the data:\n')

    header.append(title)

    print('You entered:', title)

 

    col_1 = input('\nEnter the column 1 header:\n')

    header.append(col_1)

    print('You entered:', col_1)

 

    col_2 = input('\nEnter the column 2 header:\n')

    header.append(col_2)

    print('You entered:', col_2)

 

    return header

 

 

def get_data_points():

    """Ask the user for data points, check the validity of the point, and input the data points in a dictionary if the point is valid."""

    data_dict = {}

    data_pt = input('\nEnter a data point (-1 to stop input):\n')

 

    while data_pt != '-1':

 

        if ',' not in data_pt:

            print('Error: No comma in string.')

 

        elif data_pt.count(',') > 1:

            print('Error: Too many commas in input.')

 

        else:

            num = []

            data = data_pt.split(', ')

 

            try:

                num.append(int(data[-1]))

            except ValueError:

                print('Error: Comma not followed by an integer.')

 

            if len(num) >= 1:

                name = []

                for i in data_pt:

                    if i != ',':

                        name.append(i)

                    elif i == ',':

                        break

 

                author = ''.join(name)

 

                data_dict[author] = num[0]

                print('Data string:', author)

                print('Data integer:', num[0])

 

        data_pt = input('\nEnter a data point (-1 to stop input):\n')

 

    return data_dict

 

 

def print_data(headers, data):

    """Print the table with the information from the dictionry of data points."""

    print("{:>33}".format(headers[0]))

    print("{:20}".format(headers[1]), end='|')

    print("{:>23}".format(headers[2]))

    print('-' * 44)

 

    for key in data:

        print("{:20}".format(key), end='|')

        print("{:>23}".format(data[key]))

 

 

def print_histogram(data):

    """Print the data point information in a histogram."""

    print()

    for key in data:

        print("{:>20}".format(key), end=' ')

        print('*' * data[key])

 

 

if __name__ == '__main__':

    Headers = get_data_headers()

    Data = get_data_points()

    print_data(Headers, Data)

    print_histogram(Data)
    
    

7.11 LAB: Online shopping cart - Part 2
###
This program extends the earlier "Online shopping cart" program. (Consider first saving your earlier program). 

(1) Extend the ItemToPurchase namedtuple to contain a new attribute. (2 pts)

item_description (string) - Set to "none" in the construct_item() function
Implement the following function with an ItemToPurchase as a parameter.

print_item_description() - Prints item_name and item_description attribute for an ItemToPurchase namedtuple. Has an ItemToPurchase 
parameter.

Ex. of print_item_description() output:

Bottled Water: Deer Park, 12 oz.


(2) Build a ShoppingCart namedtuple with the following data attributes and related functions. Note: Some can be function stubs (empty 
methods) initially, to be completed in later steps.

Create a namedtuple named ShoppingCart which has the customer name. date, and cart items as attributes (2 pts)
customer_name (string)
current_date (string)
cart_items (list)
Write a function named construct_cart() for ShoppingCart that creates a named tuple with the following specifications: (1 pt)

Initializes customer_name = "none", current_date = "January 1, 2016", cart_items to an empty list
Functions:

add_item()
Adds an item to cart_items list. Has parameters ShoppingCart and ItemToPurchase. Does not return anything.
remove_item()
Removes item from cart_items list. Has a ShoppingCart and a string (an item's name) as parameters. Does not return anything.
If item name cannot be found, output this message: Item not found in cart. Nothing removed.
modify_item()
Modifies an item's description, price, and/or quantity. Has parameters ShoppingCart, and ItemToPurchase. Does not return anything.
If item can be found (by name) in cart, check if parameter has default values for description, price, and quantity. If not, modify item 
in cart.
If item cannot be found (by name) in cart, output this message: Item not found in cart. Nothing modified.
get_num_items_in_cart() (2 pts)
Returns quantity of all items in cart. Has a ShoppingCart as a parameter.
get_cost_of_cart() (2 pts)
Determines and returns the total cost of items in cart. Has a ShoppingCart as a parameter.
print_total()
Outputs total of objects in cart.
Has a ShoppingCart as a parameter.
If cart is empty, output this message: SHOPPING CART IS EMPTY
print_descriptions()
Outputs each item's description.
Has a ShoppingCart as a parameter. 
Ex. of print_total() output:

John Doe's Shopping Cart - February 1, 2016
Number of Items: 8

Nike Romaleos 2 @ $189 = $378
Chocolate Chips 5 @ $3 = $15
Powerbeats 2 Headphones 1 @ $128 = $128

Total: $521

Ex. of print_descriptions() output:

John Doe's Shopping Cart - February 1, 2016

Item Descriptions
Nike Romaleos: Volt color, Weightlifting shoes
Chocolate Chips: Semi-sweet
Powerbeats 2 Headphones: Bluetooth headphones

(3) In main section of your code, prompt the user for a customer's name and today's date. Output the name and date. Create an object of 
type ShoppingCart. (1 pt) 

Ex.

Enter customer's name:
John Doe
Enter today's date:
February 1, 2016

Customer name: John Doe
Today's date: February 1, 2016

(4) Implement the print_menu() function. print_menu() has a ShoppingCart parameter, and outputs a menu of options to manipulate the 
shopping cart. Each option is represented by a single character. Build and output the menu within the function.

If the an invalid character is entered, continue to prompt for a valid choice. Hint: Implement Quit before implementing other options. 
Call print_menu() in the main() function. Continue to execute the menu until the user enters q to Quit. (3 pts) 

Ex:

MENU
a - Add item to cart
r - Remove item from cart
c - Change item quantity
i - Output items' descriptions
o - Output shopping cart
q - Quit

Choose an option:

(5) Implement Output shopping cart menu option. (3 pts) 

Ex:

OUTPUT SHOPPING CART
John Doe's Shopping Cart - February 1, 2016
Number of Items: 8

Nike Romaleos 2 @ $189 = $378
Chocolate Chips 5 @ $3 = $15
Powerbeats 2 Headphones 1 @ $128 = $128

Total: $521

(6) Implement Output item's description menu option. (2 pts) 

Ex.

OUTPUT ITEMS' DESCRIPTIONS
John Doe's Shopping Cart - February 1, 2016

Item Descriptions
Nike Romaleos: Volt color, Weightlifting shoes
Chocolate Chips: Semi-sweet
Powerbeats 2 Headphones: Bluetooth headphones

(7) Implement Add item to cart menu option. (3 pts) 

Ex:

ADD ITEM TO CART
Enter the item name:
Nike Romaleos
Enter the item description:
Volt color, Weightlifting shoes
Enter the item price:
189
Enter the item quantity:
2

(8) Implement remove item menu option. (4 pts) 

Ex:

REMOVE ITEM FROM CART
Enter name of item to remove:
Chocolate Chips

(9) Implement Change item quantity menu option. Hint: Make new ItemToPurchase object before using ModifyItem() method. (5 pts) 

Ex:

CHANGE ITEM QUANTITY
Enter the item name:
Nike Romaleos
Enter the new quantity:
3

Hints
Use the __main__ statement whenever appropriate. Read section 2.5 - "Importing modules and executing scripts " if you are not familiar 
with this.
###
from collections import namedtuple

ItemToPurchase = namedtuple(
    'ItemToPurchase',
    'item_name item_price item_quantity item_description'
)
ShoppingCart = namedtuple(
    "ShoppingCart",
    "customer_name current_date cart_items"
)


def construct_item():
    return ItemToPurchase(
        item_name='none',
        item_price=0,
        item_quantity=0,
        item_description="none"
    )


def construct_cart():
    return ShoppingCart(
        customer_name='none',
        current_date='January 1, 2016',
        cart_items=[]
    )


def add_item(ShoppingCart, ItemToPurchase):
    print('\nADD ITEM TO CART', end='\n')
    item_name = ItemToPurchase.item_name
    item_description = ItemToPurchase.item_description
    item_price = ItemToPurchase.item_price
    item_quantity = ItemToPurchase.item_quantity
    ShoppingCart.cart_items.append(
        ItemtoPurchase(
            item_name,
            item_price,
            item_quantity,
            item_description
        )
    )


def get_num_items_in_cart(ShoppingCart):
    num_items = 0
    for item in ShoppingCart.cart_items:
        num_items = num_items + item.item_quantity
    return num_items


def get_cost_of_cart(ShoppingCart):
    total_cost = 0
    cost = 0
    for item in ShoppingCart.cart_items:
        cost = (item.item_quantity * item.item_price)
        total_cost += cost
    return total_cost


class ItemtoPurchase:
    def __init__(
        self, item_name='none',
        item_price=0,
        item_quantity=0,
        item_description='none'
    ):
        self.item_name = item_name
        self.item_price = item_price
        self.item_quantity = item_quantity
        self.item_description = item_description

    def print_item_cost(self):
        string = '{} {} @ ${} = ${}'.format(
            self.item_name,
            self.item_quantity,
            self.item_price, (self.item_quantity * self.item_price)
        )
        cost = self.item_quantity * self.item_price
        return string, cost

    def print_item_description(self):
        string = '{}: {}'.format(self.item_name, self.item_description)
        print(string, end='\n')
        return string


class ShoppingCart:
    def __init__(
        self,
        customer_name='none',
        current_date='January 1, 2016',
        cart_items=[]
    ):
        self.customer_name = customer_name
        self.current_date = current_date
        self.cart_items = cart_items

    def Add_item(self, string):
        print('\nADD ITEM TO CART', end='\n')
        item_name = str(input('Enter the item name:\n'))
        item_description = str(input('Enter the item description:\n'))
        item_price = int(input('Enter the item price:\n'))
        item_quantity = int(input('Enter the item quantity:\n'))
        self.cart_items.append(
            ItemtoPurchase(
                item_name, item_price, item_quantity, item_description
            )
        )

    def remove_item(self):
        new = ShoppingCart()
        print('\nREMOVE ITEM FROM CART', end='\n')
        string = str(input('Enter name of item to remove:\n'))
        i = 0
        for item in self.cart_items:
            if(item.item_name == string):
                del self.cart_items[i]
                break
            i += 1
        if i == len(self.cart_items):
            print("Item not found in cart. Nothing removed.")

    def modify_item(self):
        print('CHANGE ITEM QUANTITY', end='\n')
        name = str(input('Enter the item name:\n'))
        quantity = int(input('Enter the new quantity:\n'))
        i = 0
        for item in self.cart_items:
            if(item.item_name == name):
                item.item_quantity = quantity
            i += 1
        if i == len(self.cart_items):
            print("Item not found in cart. Nothing modified.")

    def Get_num_items_in_cart(self):
        num_items = 0
        for item in self.cart_items:
            num_items = num_items+item.item_quantity
        return num_items

    def Get_cost_of_cart(self):
        total_cost = 0
        cost = 0
        for item in self.cart_items:
            cost = (item.item_quantity * item.item_price)
            total_cost += cost
        return total_cost

    def print_total():
        total_cost = Get_cost_of_cart()
        if (total_cost == 0):
            print('SHOPPING CART IS EMPTY')
        else:
            output_cart()

    def print_descriptions(self):
        print('\nOUTPUT ITEMS\' DESCRIPTIONS')
        print('{}\'s Shopping Cart - {}'.format(
            self.customer_name, self.current_date
        ), end='\n')
        print('\nItem Descriptions', end='\n')
        for item in self.cart_items:
            print('{}: {}'.format(
                item.item_name, item.item_description
            ), end='\n')

    def output_cart(self):
        new = ShoppingCart()
        print('OUTPUT SHOPPING CART', end='\n')
        print('{}\'s Shopping Cart - {}'.format(
            self.customer_name, self.current_date
        ), end='\n')
        print('Number of Items:', new.Get_num_items_in_cart(), end='\n\n')
        if new.Get_num_items_in_cart() == 0:
            print("SHOPPING CART IS EMPTY")
        tc = 0
        for item in self.cart_items:
            print('{} {} @ ${} = ${}'.format(
                item.item_name, item.item_quantity, item.item_price,
                (item.item_quantity * item.item_price)), end='\n'
            )
            tc += (item.item_quantity * item.item_price)
        print('\nTotal: ${}'.format(tc), end='\n')


def print_menu(ShoppingCart):
    customer_Cart = newCart
    menu = ('\nMENU\n'
            'a - Add item to cart\n'
            'r - Remove item from cart\n'
            'c - Change item quantity\n'
            'i - Output items\' descriptions\n'
            'o - Output shopping cart\n'
            'q - Quit\n')
    command = ''
    while(command != 'q'):
        string = ''
        print(menu, end='\n')
        command = input('Choose an option:\n')
        while(
            command != 'a' and command != 'o' and
            command != 'i' and command != 'r' and
            command != 'c' and command != 'q'
        ):
            command = input('Choose an option:\n')
        if(command == 'a'):
            customer_Cart.Add_item(string)
        if(command == 'o'):
            customer_Cart.output_cart()
        if(command == 'i'):
            customer_Cart.print_descriptions()
        if(command == 'r'):
            customer_Cart.remove_item()
        if(command == 'c'):
            customer_Cart.modify_item()

if __name__ == "__main__":
    # Type main section of code here
    customer_name = str(input('Enter customer\'s name:\n'))
    current_date = str(input("Enter today's date:\n"))
    print('\nCustomer name:', customer_name, end='\n')
    print('Today\'s date:', current_date, end='\n')
    newCart = ShoppingCart(customer_name, current_date)
    print_menu(newCart)



7.12 LAB: Half and Half
###
Write a function half_and_half that takes in a list and returns a new list where the elements of the second half are now in the first 
half.

Ex.:
if the input is:
[1, 2, 3, 4]
The return is
[3, 4, 1, 2]

Ex2.:
if the input is
["l","o","v", "e", "is", "l", "i", "f", "e"]
The return is
["l", "i", "f", "e", "is", "l","o","v", "e"]

Your function should only work with lists. If you're given any other type your function should raise an assertion error indicating that 
the wrong type was given.

Ex.:
if the input is:
"String"
Your function should raise an assertion error with the following message:
AssertionError: Can't reverse that, give me a list, please!

Also, in the main block of your code write code that gets a list of elements from input. The input begins with an integer indicating 
the number of elements that follow.

Ex: If the input is:

5
50
60
140
200
75

Then, your list to be passed to half and half function is:
[50, 60, 140, 200, 75]
The 5 indicates that there are five elements in the list, namely 50, 60, 140, 200, and 75. You should print the returned list after you 
call the function.
###
def half_and_half(ls):
    # check if parameter is a list
    assert (type(ls) is list), "Can't reverse that, give me a list, please!"
    # redefining n in local
    n = len(ls)
    # if len of list is even
    if n % 2 == 0:
        first = ls[0:(n//2)]
        last = ls[(n//2):]
        rev_ls = last + first
    # if len of list is odd
    else:
        first = ls[0:(n//2)]
        mid = ls[n//2]
        # convert int to list
        mid = [mid]
        last = ls[((n//2)+1):]
        rev_ls = last + mid + first

    return rev_ls

if __name__ == "__main__":
    ls = []
    n = int(input())
    # loop to build a list
    for i in range(n):
        ls.append(input())
    print(half_and_half(ls))
